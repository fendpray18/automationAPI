{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2022-12-01T03:24:28.347Z",
    "end": "2022-12-01T03:24:31.936Z",
    "duration": 3589,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "dc2eb974-3c1a-4364-8d8e-c037fcaee6ee",
      "title": "",
      "fullFile": "C:\\Users\\Fendy\\stockbitTest\\automationAPI\\tests\\beers_test.js",
      "file": "\\tests\\beers_test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7093b9e5-e147-4dc6-9db6-1e7a25606bf4",
          "title": "Beers Documentation Access",
          "fullFile": "C:\\Users\\Fendy\\stockbitTest\\automationAPI\\tests\\beers_test.js",
          "file": "\\tests\\beers_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "@all @get @beers @positive Get All Beers Data",
              "fullTitle": "Beers Documentation Access @all @get @beers @positive Get All Beers Data",
              "timedOut": false,
              "duration": 465,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const respond = await page.getBeers();\nexpect(respond.status).to.equal(responseCodeMessage.successOk);\nexpect(Object.keys(respond.body).length).to.equal(amountValid.defaultLimited);\nvar i = 0;\nconst amountCount = Object.keys(respond.body).length;\nconsole.log(`Amount of Limited Data per Page is ${amountCount}`);\nwhile(i<amountCount){\n  console.log('==============================');\n  console.log(`iterate : ${i+1}`);\n  console.log('name : ', Object.values(respond.body)[i].name);\n  i++;\n}\nexpect(respond.body).to.be.jsonSchema(schema);",
              "err": {},
              "uuid": "09e08a14-b5ed-46a8-89a7-b13954b73ef4",
              "parentUUID": "7093b9e5-e147-4dc6-9db6-1e7a25606bf4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@all @get @pagination @positive Get List Beers Data Based on Filter Pagination",
              "fullTitle": "Beers Documentation Access @all @get @pagination @positive Get List Beers Data Based on Filter Pagination",
              "timedOut": false,
              "duration": 898,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const pageCount = amountValid.requestNumberData.length;\nfor (var i=0; i < pageCount; i++){\n  var respond = await page.getPaginationData(amountValid.requestNumberData[i]);\n  expect(respond.status).to.equal(responseCodeMessage.successOk);\n  expect(Object.keys(respond.body).length).to.equal(amountValid.requestNumberData[i]);\n  console.log('==============================');\n  console.log(`Selected Number of Data : ${i}`);\n  console.log(Object.keys(respond.body).length);\n}",
              "err": {},
              "uuid": "bc9a1bad-5f0a-4cc3-a77a-429aee7dd3b3",
              "parentUUID": "7093b9e5-e147-4dc6-9db6-1e7a25606bf4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@all @get @pagination @negative Input Incorrect Pagination Criteria",
              "fullTitle": "Beers Documentation Access @all @get @pagination @negative Input Incorrect Pagination Criteria",
              "timedOut": false,
              "duration": 2209,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidData = amountValid.invalidInput;\nconst respond = await page.getPaginationData(invalidData);\nexpect(respond.status).to.equal(responseCodeMessage.failedBadRequest.codeNumber);\nconsole.log('Response Status : ', respond.status);",
              "err": {},
              "uuid": "0e481cff-adf7-4f05-a4de-f37bccaad1bd",
              "parentUUID": "7093b9e5-e147-4dc6-9db6-1e7a25606bf4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "09e08a14-b5ed-46a8-89a7-b13954b73ef4",
            "bc9a1bad-5f0a-4cc3-a77a-429aee7dd3b3",
            "0e481cff-adf7-4f05-a4de-f37bccaad1bd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3572,
          "root": false,
          "rootEmpty": false,
          "_timeout": 50000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 50000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports/"
      },
      "version": "6.2.0"
    }
  }
}